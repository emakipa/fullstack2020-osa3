{"version":3,"sources":["components/Input.js","components/Filter.js","components/Notification.js","components/PersonForm.js","components/Person.js","services/data.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","text","value","onChange","Filter","Notification","message","type","className","PersonForm","onSubmit","nameText","nameValue","nameOnChange","numberText","numberValue","numberOnChange","Person","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","showAll","setShowAll","setMessage","messageType","setMessageType","useEffect","personService","initialPersons","personsToShow","filter","person","toLowerCase","includes","updateNumber","find","p","updatedPerson","map","setTimeout","catch","error","handleDeletion","deletedPerson","window","confirm","removeName","event","target","preventDefault","returnedPerson","concat","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f2f20e3d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Input = (props) => {\n  return (\n    <div>\n      {props.text}\n      <input\n        value={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  )\n}\n\nexport default Input","import React from 'react'\nimport Input from './Input'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      <Input text={props.text} value={props.value} onChange={props.onChange} />\n    </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n//import Input from './Input'\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n  \n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\nimport Input from './Input'\n\nconst PersonForm = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.onSubmit}>\n        <div>\n          <Input text={props.nameText} value={props.nameValue} onChange={props.nameOnChange} />\n        </div>\n        <div>\n          <Input text={props.numberText} value={props.numberValue} onChange={props.numberOnChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = (props) => {\n  return (\n    <div>\n      {props.name} {props.number} <button onClick={props.onClick} >{props.text}</button>\n    </div>\n\n  )\n}\n\nexport default Person","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteSelected = id => {\n  const request = axios.delete(baseUrl + '/' + id)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, deleteSelected, update }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport PersonForm from './components/PersonForm'\nimport Person from './components/Person'\nimport personService from './services/data'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n  const [ message, setMessage ] = useState('')\n  const [ messageType, setMessageType ] = useState('')\n\n  // get data from server\n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n          // set initial state data\n           setPersons(initialPersons)\n        })\n  }, [])\n\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  // add a new person (name and number) to phonebook\n  const addName = (event) => {\n    event.preventDefault()\n\n    // check if person is already added to phonebook and confirm number update\n    if (persons.map(person => person.name).includes(newName)) { \n      const choice = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`) \n      if(choice) {\n        const updatedPerson = persons.find(p => p.name === newName)\n        updateNumber(updatedPerson.id)\n      }\n    } else {\n      const nameObject = {\n        name: newName,\n        number: newNumber,\n      }\n\n      // add data (name and number) to server\n      personService\n        .create(nameObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewNumber('')\n          })\n        setMessage(`Added ${newName}`)\n        setMessageType('success')\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)    \n    }\n  }\n\n  // delete selected name and number\n  const removeName = (id) => {\n    const deletedPerson = persons.find(p => p.id === id)\n    // confirm deletion\n    if (window.confirm(`Delete ${deletedPerson.name} ?`)) { \n      personService\n        .deleteSelected(id)\n          .then(setPersons(persons.filter(p => p.id !== id)))\n        setMessage(`Removed information of ${deletedPerson.name}`)\n        setMessageType('success')\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setNewName('')\n        setNewNumber('')\n    }   \n  }\n\n  // update number\n  const updateNumber = (id) => {\n\n    const person = persons.find(p => p.id === id)\n    const updatedPerson = { ...person, number: newNumber }\n      personService\n        .update(id, updatedPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(person => person.id !== id ? person : updatedPerson))\n            setMessage(`Updated ${updatedPerson.name}'s number`)\n            setMessageType('success')\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setNewName('')\n            setNewNumber('')\n          })    \n          .catch(error => {\n            setMessage(\n              `Information of ${updatedPerson.name} has already been removed from server`\n            )\n            setMessageType('error')\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setPersons(persons.filter(p => p.id !== id))\n          })      \n  }\n\n  // filter input\n  const handleFilterChange = (event) => {\n    if (!(event.target.value === '')) {\n      setShowAll(false)\n    }\n    setNewFilter(event.target.value)\n  }\n  \n  // name input\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  // number input\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleDeletion = (id) => {\n    removeName(id)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={message} type={messageType}/>\n\n      <Filter text='filter shown with ' value={newFilter} onChange={handleFilterChange}  />\n\n      <h3>Add a new</h3>\n      \n      <PersonForm \n        onSubmit={addName}\n        nameText='name: '\n        nameValue={newName}\n        nameOnChange={handleNameChange}\n        numberText='number: '\n        numberValue={newNumber}\n        numberOnChange={handleNumberChange}\n      />\n      \n      <h3>Numbers</h3>\n\n      <>\n        {personsToShow.map((person) => \n          <div key={person.id}>\n            <Person name={person.name} number={person.number} onClick={() => handleDeletion(person.id)} text='delete' />\n          </div>\n        )}\n      </>      \n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}